{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\OneDrive - HESSO\\\\Bureau\\\\bingo-reno-app\\\\src\\\\domain\\\\importData.tsx\",\n  _s = $RefreshSig$();\n/*\r\nexport function importData() {\r\n  console.log(\"entrer dans importData\");\r\n\r\n  return new Promise((resolve, reject) => {\r\n    Papa.parse(\"../public/datat.csv\", {\r\n      download: true,\r\n      header: true,\r\n      complete: function(results: { data: any[] }) {\r\n        console.log(\"Chargement terminé. Données :\", results.data);\r\n\r\n        // Créer une chaîne avec les 5 premières lignes du CSV\r\n        let firstFiveRows = '';\r\n        for (let i = 0; i < 5 && i < results.data.length; i++) {\r\n          firstFiveRows += JSON.stringify(results.data[i]) + '\\n';\r\n        }\r\n\r\n        // Afficher les 5 premières lignes dans une popup\r\n        alert(firstFiveRows);\r\n\r\n        // Résoudre la promesse avec les données\r\n        resolve(results.data);\r\n      },\r\n      error: function(error) {\r\n        console.log(\"Une erreur s'est produite lors du chargement du fichier CSV :\", error);\r\n\r\n        // Rejeter la promesse avec l'erreur\r\n        reject(error);\r\n      }\r\n    });\r\n  });\r\n}\r\n*/\n\nimport React, { useEffect, useState } from 'react';\nimport { usePapaParse } from 'react-papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function DataComponent() {\n  _s();\n  const [data, setData] = useState(null);\n  const {\n    readRemoteFile\n  } = usePapaParse();\n  useEffect(() => {\n    readRemoteFile('/datat.csv', {\n      header: true,\n      download: true,\n      complete: results => {\n        console.log(\"Chargement terminé. Données :\", results.data);\n\n        // Créer une chaîne avec les 5 premières lignes du CSV\n        let firstFiveRows = '';\n        for (let i = 0; i < 5 && i < results.data.length; i++) {\n          firstFiveRows += JSON.stringify(results.data[i]) + '\\n';\n        }\n\n        // Afficher les 5 premières lignes dans une popup\n        alert(firstFiveRows);\n\n        // Mettre à jour l'état avec les données\n        setData(results.data);\n      },\n      error: error => {\n        console.log(\"Une erreur s'est produite lors du chargement du fichier CSV :\", error);\n      }\n    });\n  }, [readRemoteFile]);\n\n  // Rendre les données ou un message de chargement\n  return data ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: JSON.stringify(data)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 17\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Chargement...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 53\n  }, this);\n}\n_s(DataComponent, \"B8l2clKOm2z5B6HzeAyuJBW7Xqo=\", false, function () {\n  return [usePapaParse];\n});\n_c = DataComponent;\nvar _c;\n$RefreshReg$(_c, \"DataComponent\");","map":{"version":3,"names":["React","useEffect","useState","usePapaParse","jsxDEV","_jsxDEV","DataComponent","_s","data","setData","readRemoteFile","header","download","complete","results","console","log","firstFiveRows","i","length","JSON","stringify","alert","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/jason/OneDrive - HESSO/Bureau/bingo-reno-app/src/domain/importData.tsx"],"sourcesContent":["/*\r\nexport function importData() {\r\n  console.log(\"entrer dans importData\");\r\n\r\n  return new Promise((resolve, reject) => {\r\n    Papa.parse(\"../public/datat.csv\", {\r\n      download: true,\r\n      header: true,\r\n      complete: function(results: { data: any[] }) {\r\n        console.log(\"Chargement terminé. Données :\", results.data);\r\n\r\n        // Créer une chaîne avec les 5 premières lignes du CSV\r\n        let firstFiveRows = '';\r\n        for (let i = 0; i < 5 && i < results.data.length; i++) {\r\n          firstFiveRows += JSON.stringify(results.data[i]) + '\\n';\r\n        }\r\n\r\n        // Afficher les 5 premières lignes dans une popup\r\n        alert(firstFiveRows);\r\n\r\n        // Résoudre la promesse avec les données\r\n        resolve(results.data);\r\n      },\r\n      error: function(error) {\r\n        console.log(\"Une erreur s'est produite lors du chargement du fichier CSV :\", error);\r\n\r\n        // Rejeter la promesse avec l'erreur\r\n        reject(error);\r\n      }\r\n    });\r\n  });\r\n}\r\n*/\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { usePapaParse } from 'react-papaparse';\r\n\r\nexport function DataComponent() {\r\n  const [data, setData] = useState(null);\r\n  const { readRemoteFile } = usePapaParse();\r\n\r\n  useEffect(() => {\r\n    readRemoteFile('/datat.csv', {\r\n      header: true,\r\n      download: true,\r\n      complete: (results: any) => {\r\n        console.log(\"Chargement terminé. Données :\", results.data);\r\n\r\n        // Créer une chaîne avec les 5 premières lignes du CSV\r\n        let firstFiveRows = '';\r\n        for (let i = 0; i < 5 && i < results.data.length; i++) {\r\n          firstFiveRows += JSON.stringify(results.data[i]) + '\\n';\r\n        }\r\n\r\n        // Afficher les 5 premières lignes dans une popup\r\n        alert(firstFiveRows);\r\n\r\n        // Mettre à jour l'état avec les données\r\n        setData(results.data);\r\n      },\r\n      error: (error: any) => {\r\n        console.log(\"Une erreur s'est produite lors du chargement du fichier CSV :\", error);\r\n      }\r\n    });\r\n  }, [readRemoteFile]);\r\n\r\n  // Rendre les données ou un message de chargement\r\n  return data ? <div>{JSON.stringify(data)}</div> : <div>Chargement...</div>;\r\n}\r\n    \r\n\r\n    "],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,YAAY,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,OAAO,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EAC9B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM;IAAEQ;EAAe,CAAC,GAAGP,YAAY,CAAC,CAAC;EAEzCF,SAAS,CAAC,MAAM;IACdS,cAAc,CAAC,YAAY,EAAE;MAC3BC,MAAM,EAAE,IAAI;MACZC,QAAQ,EAAE,IAAI;MACdC,QAAQ,EAAGC,OAAY,IAAK;QAC1BC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEF,OAAO,CAACN,IAAI,CAAC;;QAE1D;QACA,IAAIS,aAAa,GAAG,EAAE;QACtB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,IAAIA,CAAC,GAAGJ,OAAO,CAACN,IAAI,CAACW,MAAM,EAAED,CAAC,EAAE,EAAE;UACrDD,aAAa,IAAIG,IAAI,CAACC,SAAS,CAACP,OAAO,CAACN,IAAI,CAACU,CAAC,CAAC,CAAC,GAAG,IAAI;QACzD;;QAEA;QACAI,KAAK,CAACL,aAAa,CAAC;;QAEpB;QACAR,OAAO,CAACK,OAAO,CAACN,IAAI,CAAC;MACvB,CAAC;MACDe,KAAK,EAAGA,KAAU,IAAK;QACrBR,OAAO,CAACC,GAAG,CAAC,+DAA+D,EAAEO,KAAK,CAAC;MACrF;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACb,cAAc,CAAC,CAAC;;EAEpB;EACA,OAAOF,IAAI,gBAAGH,OAAA;IAAAmB,QAAA,EAAMJ,IAAI,CAACC,SAAS,CAACb,IAAI;EAAC;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC,gBAAGvB,OAAA;IAAAmB,QAAA,EAAK;EAAa;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAC5E;AAACrB,EAAA,CA/BeD,aAAa;EAAA,QAEAH,YAAY;AAAA;AAAA0B,EAAA,GAFzBvB,aAAa;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}