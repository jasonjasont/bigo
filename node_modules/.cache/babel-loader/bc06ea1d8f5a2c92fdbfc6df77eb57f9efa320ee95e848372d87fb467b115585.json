{"ast":null,"code":"import Papa from \"papaparse\";\nexport const getCSV = (setValues, criteria) => {\n  Papa.parse(`${process.env.PUBLIC_URL}/data.csv`, {\n    download: true,\n    header: true,\n    skipEmptyLines: true,\n    delimiter: \",\",\n    dynamicTyping: true,\n    complete: results => {\n      console.log(results);\n\n      // Recherchez la première ligne qui satisfait tous les critères\n      const matchingRow = results.data.find(row => {\n        return Object.entries(criteria).every(([key, value]) => row[key] === value);\n      });\n\n      // `matchingRow` est maintenant la première ligne qui satisfait tous les critères, ou `undefined` si aucune ligne ne correspond\n      setValues(matchingRow ? [matchingRow] : []);\n\n      // Affichez `matchingRow` dans la console\n      console.log(matchingRow);\n    }\n  });\n};\n\n// Exemple d'utilisation de la fonction getCSV avec des critères de recherche\n/*const searchCriteria: SearchCriteria = {\r\n    \"Isolation du toit\": 1,\r\n    \"Changement des fenêtres\": 1,\r\n    \"Isolation des murs\": 1,\r\n    \r\n}\r\n\r\nconst [values, setValues] = React.useState<Data[] | undefined>()\r\n\r\ngetCSV(setValues, searchCriteria)*/","map":{"version":3,"names":["Papa","getCSV","setValues","criteria","parse","process","env","PUBLIC_URL","download","header","skipEmptyLines","delimiter","dynamicTyping","complete","results","console","log","matchingRow","data","find","row","Object","entries","every","key","value"],"sources":["C:/Users/jason/OneDrive - HESSO/Bureau/bingo-reno-app/src/domain/csvReader.tsx"],"sourcesContent":["import Papa, { ParseResult } from \"papaparse\";\r\nimport React from 'react';\r\n\r\nexport type Data = {\r\n    \"Periode\": string,\r\n    \"Isolation du toit\": number,\r\n    \"Changement des fenêtres\": number,\r\n    \"Isolation des murs\": number,\r\n    \"Isolation du sol\": number,\r\n    \"Changement du système de chauffage principal\": number,\r\n    \"Installation ou remplacement d'un poêle\": number,\r\n    \"Installation d'un chauffe-eau, solaire ou thermodynamique\": number,\r\n    \"Installation de panneaux solaires photovoltaïques\": number,\r\n    \"Installation d'un système de ventilation\": number,\r\n    \"Rampants ou combles perdus ?\": string,\r\n    \"fait ?\": string,\r\n    \"Trav 1\": string,\r\n    \"Trav 2\": string,\r\n    \"Trav 3\": string,\r\n    \"Prix\": number,\r\n    \"Niveau aides\": string,\r\n    \"Baisse factures\": number,\r\n    \"Confort hiver\": number,\r\n    \"Confort été\": number,\r\n    \"Nom scénario\": string,\r\n    \"identiques ?\": string,\r\n    \"Trav 1 Sc2\": string,\r\n    \"Trav 2 Sc2\": string,\r\n    \"Trav 3 Sc2\": string,\r\n    \"Trav 4 Sc2\": string,\r\n    \"Prix Sc2\": number,\r\n    \"Niveau aides Sc2\": string,\r\n    \"Baisse factures Sc2\": number,\r\n    \"Confort hiver Sc2\": number,\r\n    \"Confort été Sc2\": number,\r\n    \"Nom scénario Sc2\": string,\r\n    \"identiques Sc2\": number,\r\n    \"identiques ? Sc2\": string,\r\n    \"Trav 1 Sc3\": string,\r\n    \"Trav 2 Sc3\": string,\r\n    \"Trav 3 Sc3\": string,\r\n    \"Trav 4 Sc3\": string,\r\n    \"Trav 5 Sc3\": string,\r\n    \"Trav 6 Sc3\": string,\r\n    \"Prix Sc3\": number,\r\n    \"Niveau aides Sc3\": string,\r\n    \"Baisse factures Sc3\": number,\r\n    \"Confort hiver Sc3\": number,\r\n    \"Confort été Sc3\": number,\r\n    \"Nom scénario Sc3\": string\r\n}\r\n\r\nexport type SearchCriteria = {\r\n    \"Isolation du toit\": number,\r\n    \"Changement des fenêtres\": number,\r\n    \"Isolation des murs\": number,\r\n}\r\n\r\nexport const getCSV = (setValues: React.Dispatch<React.SetStateAction<Data[] | undefined>>, criteria: SearchCriteria) => {\r\n    Papa.parse(`${process.env.PUBLIC_URL}/data.csv`, {\r\n        download: true,\r\n        header: true,\r\n        skipEmptyLines: true,\r\n        delimiter: \",\",\r\n        dynamicTyping: true,\r\n        complete: (results: ParseResult<Data>) => {\r\n            console.log(results)\r\n\r\n            // Recherchez la première ligne qui satisfait tous les critères\r\n            const matchingRow = results.data.find(row => {\r\n                return Object.entries(criteria).every(([key, value]) => row[key as keyof Data] === value)\r\n            })\r\n\r\n            // `matchingRow` est maintenant la première ligne qui satisfait tous les critères, ou `undefined` si aucune ligne ne correspond\r\n            setValues(matchingRow ? [matchingRow] : [])\r\n\r\n            // Affichez `matchingRow` dans la console\r\n            console.log(matchingRow)\r\n        }\r\n    })\r\n}\r\n\r\n// Exemple d'utilisation de la fonction getCSV avec des critères de recherche\r\n/*const searchCriteria: SearchCriteria = {\r\n    \"Isolation du toit\": 1,\r\n    \"Changement des fenêtres\": 1,\r\n    \"Isolation des murs\": 1,\r\n    \r\n}\r\n\r\nconst [values, setValues] = React.useState<Data[] | undefined>()\r\n\r\ngetCSV(setValues, searchCriteria)*/"],"mappings":"AAAA,OAAOA,IAAI,MAAuB,WAAW;AA0D7C,OAAO,MAAMC,MAAM,GAAGA,CAACC,SAAmE,EAAEC,QAAwB,KAAK;EACrHH,IAAI,CAACI,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,UAAW,WAAU,EAAE;IAC7CC,QAAQ,EAAE,IAAI;IACdC,MAAM,EAAE,IAAI;IACZC,cAAc,EAAE,IAAI;IACpBC,SAAS,EAAE,GAAG;IACdC,aAAa,EAAE,IAAI;IACnBC,QAAQ,EAAGC,OAA0B,IAAK;MACtCC,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC;;MAEpB;MACA,MAAMG,WAAW,GAAGH,OAAO,CAACI,IAAI,CAACC,IAAI,CAACC,GAAG,IAAI;QACzC,OAAOC,MAAM,CAACC,OAAO,CAACnB,QAAQ,CAAC,CAACoB,KAAK,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAKL,GAAG,CAACI,GAAG,CAAe,KAAKC,KAAK,CAAC;MAC7F,CAAC,CAAC;;MAEF;MACAvB,SAAS,CAACe,WAAW,GAAG,CAACA,WAAW,CAAC,GAAG,EAAE,CAAC;;MAE3C;MACAF,OAAO,CAACC,GAAG,CAACC,WAAW,CAAC;IAC5B;EACJ,CAAC,CAAC;AACN,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}