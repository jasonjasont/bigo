{"ast":null,"code":"/*\r\nexport function importData() {\r\n  console.log(\"entrer dans importData\");\r\n\r\n  return new Promise((resolve, reject) => {\r\n    Papa.parse(\"../public/datat.csv\", {\r\n      download: true,\r\n      header: true,\r\n      complete: function(results: { data: any[] }) {\r\n        console.log(\"Chargement terminé. Données :\", results.data);\r\n\r\n        // Créer une chaîne avec les 5 premières lignes du CSV\r\n        let firstFiveRows = '';\r\n        for (let i = 0; i < 5 && i < results.data.length; i++) {\r\n          firstFiveRows += JSON.stringify(results.data[i]) + '\\n';\r\n        }\r\n\r\n        // Afficher les 5 premières lignes dans une popup\r\n        alert(firstFiveRows);\r\n\r\n        // Résoudre la promesse avec les données\r\n        resolve(results.data);\r\n      },\r\n      error: function(error) {\r\n        console.log(\"Une erreur s'est produite lors du chargement du fichier CSV :\", error);\r\n\r\n        // Rejeter la promesse avec l'erreur\r\n        reject(error);\r\n      }\r\n    });\r\n  });\r\n}\r\n*/\n\nimport { useCSV } from 'react-papaparse';\nexport function importData() {\n  var _s = $RefreshSig$();\n  console.log(\"entrer dans importData\");\n  return new Promise(_s((resolve, reject) => {\n    _s();\n    const {\n      data,\n      error\n    } = useCSV(\"../public/datat.csv\", {\n      download: true,\n      header: true\n    });\n    if (error) {\n      console.log(\"Une erreur s'est produite lors du chargement du fichier CSV :\", error);\n      reject(error);\n    } else {\n      console.log(\"Chargement terminé. Données :\", data);\n\n      // Créer une chaîne avec les 5 premières lignes du CSV\n      let firstFiveRows = '';\n      for (let i = 0; i < 5 && i < data.length; i++) {\n        firstFiveRows += JSON.stringify(data[i]) + '\\n';\n      }\n\n      // Afficher les 5 premières lignes dans une popup\n      alert(firstFiveRows);\n\n      // Résoudre la promesse avec les données\n      resolve(data);\n    }\n  }, \"1G22Fj6rB/VffCLnxGGH+pnyNaw=\", false, function () {\n    return [useCSV];\n  }));\n}","map":{"version":3,"names":["useCSV","importData","_s","$RefreshSig$","console","log","Promise","resolve","reject","data","error","download","header","firstFiveRows","i","length","JSON","stringify","alert"],"sources":["C:/Users/jason/OneDrive - HESSO/Bureau/bingo-reno-app/src/domain/importData.tsx"],"sourcesContent":["import Papa from 'papaparse';\r\nimport { useCSVReader} from 'react-papaparse';\r\n/*\r\nexport function importData() {\r\n  console.log(\"entrer dans importData\");\r\n\r\n  return new Promise((resolve, reject) => {\r\n    Papa.parse(\"../public/datat.csv\", {\r\n      download: true,\r\n      header: true,\r\n      complete: function(results: { data: any[] }) {\r\n        console.log(\"Chargement terminé. Données :\", results.data);\r\n\r\n        // Créer une chaîne avec les 5 premières lignes du CSV\r\n        let firstFiveRows = '';\r\n        for (let i = 0; i < 5 && i < results.data.length; i++) {\r\n          firstFiveRows += JSON.stringify(results.data[i]) + '\\n';\r\n        }\r\n\r\n        // Afficher les 5 premières lignes dans une popup\r\n        alert(firstFiveRows);\r\n\r\n        // Résoudre la promesse avec les données\r\n        resolve(results.data);\r\n      },\r\n      error: function(error) {\r\n        console.log(\"Une erreur s'est produite lors du chargement du fichier CSV :\", error);\r\n\r\n        // Rejeter la promesse avec l'erreur\r\n        reject(error);\r\n      }\r\n    });\r\n  });\r\n}\r\n*/\r\n\r\nimport { useCSV } from 'react-papaparse';\r\n\r\nexport function importData() {\r\n  console.log(\"entrer dans importData\");\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const { data, error } = useCSV(\"../public/datat.csv\", { download: true, header: true });\r\n\r\n    if (error) {\r\n      console.log(\"Une erreur s'est produite lors du chargement du fichier CSV :\", error);\r\n      reject(error);\r\n    } else {\r\n      console.log(\"Chargement terminé. Données :\", data);\r\n\r\n      // Créer une chaîne avec les 5 premières lignes du CSV\r\n      let firstFiveRows = '';\r\n      for (let i = 0; i < 5 && i < data.length; i++) {\r\n        firstFiveRows += JSON.stringify(data[i]) + '\\n';\r\n      }\r\n\r\n      // Afficher les 5 premières lignes dans une popup\r\n      alert(firstFiveRows);\r\n\r\n      // Résoudre la promesse avec les données\r\n      resolve(data);\r\n    }\r\n  });\r\n}"],"mappings":"AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,MAAM,QAAQ,iBAAiB;AAExC,OAAO,SAASC,UAAUA,CAAA,EAAG;EAAA,IAAAC,EAAA,GAAAC,YAAA;EAC3BC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EAErC,OAAO,IAAIC,OAAO,CAAAJ,EAAA,CAAC,CAACK,OAAO,EAAEC,MAAM,KAAK;IAAAN,EAAA;IACtC,MAAM;MAAEO,IAAI;MAAEC;IAAM,CAAC,GAAGV,MAAM,CAAC,qBAAqB,EAAE;MAAEW,QAAQ,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAK,CAAC,CAAC;IAEvF,IAAIF,KAAK,EAAE;MACTN,OAAO,CAACC,GAAG,CAAC,+DAA+D,EAAEK,KAAK,CAAC;MACnFF,MAAM,CAACE,KAAK,CAAC;IACf,CAAC,MAAM;MACLN,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEI,IAAI,CAAC;;MAElD;MACA,IAAII,aAAa,GAAG,EAAE;MACtB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,IAAIA,CAAC,GAAGL,IAAI,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;QAC7CD,aAAa,IAAIG,IAAI,CAACC,SAAS,CAACR,IAAI,CAACK,CAAC,CAAC,CAAC,GAAG,IAAI;MACjD;;MAEA;MACAI,KAAK,CAACL,aAAa,CAAC;;MAEpB;MACAN,OAAO,CAACE,IAAI,CAAC;IACf;EACF,CAAC;IAAA,QApByBT,MAAM;EAAA,EAoB/B,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}